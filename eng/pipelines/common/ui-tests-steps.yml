parameters:
  platform: '' # [ android, ios, windows, catalyst ]
  path: '' # path to csproj
  device: '' # the xharness device to use
  cakeArgs: '' # additional cake args
  app: '' #path to app to test
  version: '' #the iOS version'
  provisionatorChannel: 'latest'
  agentPoolAccessToken: ''
  configuration : "Release"

steps:

  - template: provision.yml
    parameters:
      ${{ if eq(parameters.platform, 'windows') }}:
        platform: windows
        skipProvisioning: true
      ${{ if ne(parameters.platform, 'windows') }}:
        platform: macos
        skipProvisioning: false
      skipXcode: false
        
      provisionatorChannel: ${{ parameters.provisionatorChannel }}

  - task: PowerShell@2
    condition: ne('${{ parameters.platform }}' , 'windows')
    inputs:
      targetType: 'inline'
      script: |
        defaults write -g NSAutomaticCapitalizationEnabled -bool false
        defaults write -g NSAutomaticTextCompletionEnabled -bool false
        defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    displayName: "Modify defaults"
    continueOnError: true

  - task: NodeTool@0
    inputs:
      versionSpec: "18.13.0"
    displayName: "Install node"

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        node -v
        npm install -g appium@2.0.0-beta.61
        appium -v
        $x = appium driver list --installed --json  | ConvertFrom-Json
        if(!$x.windows)
        {
            appium driver install --source=npm appium-windows-driver
        }
        if(!$x.uiautomator2)
        {
            appium driver install uiautomator2
        }
        if(!$x.xcuitest)
        {
            appium driver install xcuitest
        }
        if(!$x.mac2)
        {
            appium driver install mac2
        }
    displayName: "Install Appium"
    continueOnError: true

  - pwsh: ./build.ps1 --target=dotnet --configuration="${{ parameters.configuration }}" --verbosity=diagnostic
    displayName: 'Install .NET'
    retryCountOnTaskFailure: 3
    env:
      DOTNET_TOKEN: $(dotnetbuilds-internal-container-read-token)
      PRIVATE_BUILD: $(PrivateBuild)

  - pwsh: echo "##vso[task.prependpath]$(DotNet.Dir)"
    displayName: 'Add .NET to PATH'

  - pwsh: ./build.ps1 --target=dotnet-buildtasks --configuration="${{ parameters.configuration }}"
    displayName: 'Build the MSBuild Tasks'

  - pwsh: ./build.ps1 --target=dotnet-samples --configuration="${{ parameters.configuration }}" --${{ parameters.platform }} --verbosity=diagnostic --usenuget=false
    displayName: 'Build the samples'

  # - bash: |
  #     sudo xcode-select --reset
  #   displayName: 'XCode reset'
  #   condition: ne('${{ parameters.platform }}' , 'windows')

  - pwsh: ./build.ps1 -Script eng/devices/${{ parameters.platform }}.cake --target=uitest --project="${{ parameters.path }}" --appproject="${{ parameters.app }}" --device="${{ parameters.device }}" --apiversion="${{ parameters.version }}" --configuration="${{ parameters.configuration }}" --results="$(TestResultsDirectory)" --binlog="$(LogDirectory)" ${{ parameters.cakeArgs }} --verbosity=diagnostic
    displayName: $(Agent.JobName)
    retryCountOnTaskFailure: 2
  
  - task: PublishTestResults@2
    displayName: Publish the $(System.PhaseName) test results
    condition: always()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '$(TestResultsDirectory)/*.trx'
      testRunTitle: '$(System.PhaseName)'

  - task: PublishBuildArtifacts@1
    condition: always()
    displayName: publish artifacts

  # This must always be placed as the last step in the job
  - template: agent-rebooter/mac.v1.yml@yaml-templates
    parameters:
      AgentPoolAccessToken: ${{ parameters.agentPoolAccessToken }}
